#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>

// Structure for a process
struct Process
{
    int pid; // Process ID
    int bt; // Burst Time
    int priority; // Priority of this process
};

// Function to sort the Process acc. to priority
int my_compare(const void *a, const void *b)
{
    struct Process *p1 = (struct Process *)a;
    struct Process *p2 = (struct Process *)b;
    return (p1->priority - p2->priority);
}

// Function to calculate the waiting time for all
// processes
void findWaitingTime(struct Process proc[], int n,
                                int wt[])
{
    // waiting time for first process is 0
    wt[0] = 0;

    // calculating waiting time
    for (int  i = 1; i < n ; i++ )
        wt[i] =  proc[i-1].bt + wt[i-1] ;
}

// Function to calculate turn around time
void findTurnAroundTime( struct Process proc[], int n,
                    int wt[], int tat[])
{
    // calculating turnaround time by adding
    // bt[i] + wt[i]
    for (int  i = 0; i < n ; i++)
        tat[i] = proc[i].bt + wt[i];
}

// Function to calculate average time
void findavgTime(struct Process proc[], int n)
{
    int wt[n], tat[n], total_wt = 0, total_tat = 0;

    // Function to find waiting time of all processes
    findWaitingTime(proc, n, wt);

    // Function to find turn around time for all processes
    findTurnAroundTime(proc, n, wt, tat);

    // Display processes along with all details
    printf("Processes   Burst time   Waiting time   Turn around time\n");

    // Calculate total waiting time and total turn
    // around time
    for (int  i=0; i<n; i++)
    {
        total_wt = total_wt + wt[i];
        total_tat = total_tat + tat[i];
        printf("   %d ",proc[i].pid);
        printf("       %d ",proc[i].bt);
        printf("       %d",wt[i]);
        printf("       %d\n",tat[i]);
    }

    float s = (float)total_wt / (float)n;
    float t = (float)total_tat / (float)n;
    printf("Average waiting time = %f",s);
    printf("\n");
    printf("Average turn around time = %f ",t);
}

// Function to implement priority scheduling
void priorityScheduling(struct Process proc[], int n)
{
    // Sort processes by priority
    qsort(proc, n, sizeof(proc[0]), my_compare);

    printf("Order in which processes gets executed \n");
    for (int  i = 0 ; i <  n; i++)
        printf("%d ", proc[i].pid);

    findavgTime(proc, n);
}

// Function to implement round robin scheduling
void roundRobin(struct Process proc[], int n)
{
    // Create a queue
    int qt = 3; // quantum time
    int temp[n];
    int front = 0;
    int rear = -1;

    // Copy the burst time into temp array
    for (int i = 0; i < n; i++)
        temp[i] = proc[i].bt;

    // Applying round robin
    while (1)
    {
        int flag = 0, c=0;
        // Traverse all processes one by one repeatedly
        for (int i = 0; i < n; i++)
        {
            // If burst time of a process is greater than 0
            // then only need to process further
            if (temp[i] > 0)
            {
                // Decrement the burst_time of current process
                // by quantum
                if (temp[i] > qt)
                {
                    // Increase the value of front pointer
                    // to point to next process
                    front++;
                    // Assign remaining burst time to
                    // this process
                    temp[i] = temp[i] - qt;
                    // Set flag to indicate processed
                    flag = 1;
                }

                // If burst time is smaller than or equal to
                // quantum. Last cycle for this process
                else
                {
                    // Increase the value of front pointer
                    // to point to next process
                    front++;
                    // Copy remaining burst time into
                    // priority array
                    c = temp[i];
                    temp[i] = 0;
                    // Set flag to indicate processed
                    flag = 1;
                }
            }
        }

        // If flag is set to indicate processed
        // then only need to print the processed
        // processes
        if (flag == 1)
            printf("%d ", c);

        // Check if all processes are done
        if (front == rear+1)
            break;
    }
    findavgTime(proc, n);
}

// Function to implement shortest job first scheduling
void shortestJobFirst(struct Process proc[], int n)
{
    // Sort processes by burst time
    qsort(proc, n, sizeof(proc[0]), my_compare);

    printf("Order in which processes gets executed \n");
    for (int  i = 0 ; i <  n; i++)
        printf("%d ", proc[i].pid);

    findavgTime(proc, n);
}

// Function to implement multilevel queue scheduling
void multilevelQueueScheduling(struct Process proc[], int n)
{
    // Create three queues
    // Queue 1 with highest priority range
    // Queue 2 with medium priority range
    // Queue 3 with lowest priority range
    int q1[n], q2[n], q3[n];
    int front1 = 0, rear1 = -1;
    int front2 = 0, rear2 = -1;
    int front3 = 0, rear3 = -1;

    // Copy the process ID's into the respective queues
    for (int i = 0; i < n; i++)
    {
        if (proc[i].priority >= 0 && proc[i].priority <= 5)
            q1[++rear1] = proc[i].pid;
        else if (proc[i].priority >= 6 && proc[i].priority <= 10)
            q2[++rear2] = proc[i].pid;
        else if (proc[i].priority >= 11 && proc[i].priority <= 15)
            q3[++rear3] = proc[i].pid;
    }

    // Apply round robin algorithm to queue 1
    printf("\nProcess execution order: ");
    while (front1 <= rear1)
    {
        int c = q1[front1];
        printf(" %d ", c);
        front1++;
    }

    // Apply priority scheduling algorithm to queue 2
    while (front2 <= rear2)
    {
        int c = q2[front2];
        printf(" %d ", c);
        front2++;
    }

    // Apply shortest job first algorithm to queue 3
    while (front3 <= rear3)
    {
        int c = q3[front3];
        printf(" %d ", c);
        front3++;
    }
    findavgTime(proc, n);
}

// Driver code
int main()
{
    // Prompt the user to enter number of processes
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Create an array of processes
    struct Process proc[n];

    // Prompt the user to enter the burst time and priority of each process
    for (int i = 0; i < n; i++)
    {
        printf("\nProcess ID: %d \n", i+1);
        printf("Enter Burst Time: ");
        scanf("%d", &proc[i].bt);
        printf("Enter Priority: ");
        scanf("%d", &proc[i].priority);
        proc[i].pid = i+1;
    }

    // Call the multilevel queue scheduling function
    multilevelQueueScheduling(proc, n);

    return 0;
}
